package n43

import (
	"fmt"
	"github.com/reogac/sbi/models"
	"net"
	"strings"
)

//ALL data models between UPMF and SMF are defined in this package

type UpfPathQuery struct {
	Dnn    string
	Snssai models.Snssai
	Nets   []string
}

//represent a path consisting of Nodes in user plane from access network to
//data network

type UpfPath struct {
	Path []*PathNode //UP nodes in the path
	Ip   net.IP      //Ue's IP generated by UPMF
}

func (p *UpfPath) String() string {
	path := []string{}
	for _, node := range p.Path {
		path = append(path, node.String())
	}
	return fmt.Sprintf("[%s]\nIp: %s", strings.Join(path, ","), p.Ip.String())
}

type PathNode struct {
	UlIp net.IP              //ip of the uplink face
	DlIp net.IP              //ip of the downlink face
	Sbi  models.EndpointInfo //must have a non-empty Uuid
}

func (n *PathNode) String() string {
	return fmt.Sprintf("sbi: %s, Ul: %s, Dl: %s", models.EndpointInfoToString(n.Sbi), n.UlIp.String(), n.DlIp.String())
}

// data model function gettopo for upmf2fe:
type UpfNode struct {
	Id      string // Upf Identity
	Slices  []models.Snssai
	SbiIp   net.IP              // UPF's IP
	SbiPort int                 // UPF's port for Sbi
	Infs    map[string][]NetInf // Data Infs for Upf
}

type TopoUpf struct {
	SlicesTopo map[string]models.Snssai
	Nets       map[string]uint8
	Nodes      map[string]*UpfNode
}

type NetInf struct {
	Id      string
	Netname string
	Nettype uint8
	Addr    net.IP
}

//data models for Smf subscription

type NetworkType string

const (
	NETWORK_TYPE_N3 NetworkType = "N3"
	NETWORK_TYPE_N6 NetworkType = "N6"
	NETWORK_TYPE_N9 NetworkType = "N9"
)

type SmfSubscriptionRequest struct {
	Snssai   models.Snssai
	Callback string
}
type SmfSubscriptionResponse struct {
	SubId string                 //subscription id generated by UPMF
	Nets  map[string]NetworkType //map of configured networks
	DNs   []DNConfiguration      //DNs in the subsribed slice
	Nodes []UpfTopoNode          //list of UpfNodes in the slice
}

// list of parameters configured for a DN,
type DNConfiguration struct {
	Dnn   string //Dnn identity
	DnsV4 net.IP
	DnsV6 net.IP
	Pcscf net.IP
}

type UpfTopoNode struct {
	Id   string
	Dnns map[string]net.IPNet //map Dnn->CIDR
	//NetInf []NetInf //list or map of Network interface
	//add others
	Callback models.EndpointInfo
}
